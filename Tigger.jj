// Options for JavaCC.
options { LOOKAHEAD=1; FORCE_LA_CHECK=true; }

// Fonction principale
PARSER_BEGIN(Tigger)
public class Tigger
{
    public static void main(String args[]) throws ParseException
    {
        Tigger parser = new Tigger(System.in);
        parser.mainloop();
    }
}
PARSER_END(Tigger)

// Characters to ignore.
SKIP: { " " | "\r" | "\t" }

// Token specifications.
TOKEN:
{
    < NUMBER: (<DIGIT>)+ ("." (<DIGIT>)*)? >  // A decimal number.
|   < DIGIT: ["0"-"9"] >                      // A decimal digit.
|   < EOL: "\n" >                             // End of line.
}

// Main lopp: read expressions on a line until end of file.
//     mainloop â†’ (expression <EOL>)* <EOF>
void mainloop():
{ double a; }
{
    (
      a=expression() <EOL> { System.out.println(a); }
    )*
    <EOF>
}

// Expression (the axiom).
// E -> T ( "+"T | "-"T )*
// T -> F ( "*"F | "/"F )*
// F -> <NUM> | "("E")"
double expression():
{ double a,b; }
{
    a=term()
    (
      "+" b=term() { a += b; }
    | "-" b=term() { a -= b; }
    )* { return a; }
}

double term():
{ double a,b; }
{
		a=factor()
		(
      "*" b=factor() { a *= b; }
    | "/" b=factor() { a /= b; }
		)* { return a; }
}



// Element of an expression.
double factor(): // TODO: return an expression
{ Token t; double a;}
{
    t=<NUMBER> { return Double.parseDouble(t.toString()); }
|		(
			"(" a=expression()
			")" {return a;}
		)
}

// /Exp/
//  + /Bin/ Exp Exp
//  |   +-- Add
//  |   +-- Sub
//  |   +-- Mul
//  |   +-- Div
//  + Number double
