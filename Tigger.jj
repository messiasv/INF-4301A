// Options for JavaCC.
options { LOOKAHEAD=1; FORCE_LA_CHECK=true; STATIC=false;}

// Fonction principale
PARSER_BEGIN(Tigger)
import ast.*;

public class Tigger
{
    public static void main(String args[]) throws ParseException
    {while(true){
			  System.out.println("Please insert an expression:");
        Tigger parser = new Tigger(System.in);
        Exp a = parser.mainloop();
        //System.out.println("Evaluation of "+PrettyPrinter.visit(a)+" give the result "+ Evaluateur.visit(a));
        }
    }
}
PARSER_END(Tigger)

// Characters to ignore.
SKIP: { " " | "\r" | "\t" }

// Token specifications.
TOKEN:
{
    < NUMBER: (<DIGIT>)+ ("." (<DIGIT>)*)? >  // A decimal number.
|   < DIGIT: ["0"-"9"] >                      // A decimal digit.
|   < EOL: "\n" >                             // End of line.
}

// Main lopp: read expressions on a line until end of file.
//     mainloop -> (expression <EOL>)* <EOF>
Exp mainloop():
{ Exp a; }
{
    (//Print the result
    "print(" a = ifThenElse() ")" <EOL> {System.out.println(""+Evaluateur.visit(a));
                                         return a;}
     )*
     <EOF>

  | (//Don't print the result
      a = ifThenElse() <EOL> {return a;}
    )*
    <EOF>
}

//E -> T(+T|-T)
//T -> F(*F|/F)
//F -> <NUM> |(E)

Exp ifThenElse():
{Exp a,b,c;}
{
  (//In case there is an if then else operator
    "if" a = ifThenElse() "then" b = expression() "else" c=expression() {if(Evaluateur.visit(a)==1){return b;}else return c;}
  )
  |(//In case there is no if then else operator
    a = comp() {return a;}
  ) {return a;}
}


Exp comp():
{Exp a,b;}
{
  a = expression()
  (
    "="  b = expression() {a = new Eq(a,b);}
  | "<>" b = expression() {a = new Ne(a,b);}
  | "<=" b = expression() {a = new Le(a,b);}
  | "<"  b = expression() {a = new Lt(a,b);}
  | ">=" b = expression() {a = new Ge(a,b);}
  | ">"  b = expression() {a = new Gt(a,b);}
  | {return a;} // if we haven't any comparison to do
  ) {return a;}
}

Exp expression():
{Exp a,b;}
{
	a = term()
	(
		"+" b=term() {a= new Add(a,b);}
	|	"-" b=term() {a= new Sub(a,b);}
	)*	{return a;}
}

Exp term():
{Exp a,b;}
{
	a = unary()
	(
		"*" b=unary() {a= new Mul(a,b);}
	|	"/" b=unary() {a= new Div(a,b);}
	)*	{return a;}
}

Exp unary():
{Token t; Exp a;}
{
    t=<NUMBER> { return new Num(Double.parseDouble(t.toString())); }
|	(
    "+" a = factor() {a = new Plus(a);}
  | "-" a = factor() {a = new Minus(a);}
  ){return a;}
| (
    "(" a=expression()
    ")" {return a;}
  )
}

// Factor of an expression.
Exp factor():
{ Token t; Exp a; }
{
    t=<NUMBER> { return new Num(Double.parseDouble(t.toString())); }
|	(
		"("	a=expression()
		")" {return a;}
	)
}

/*
Make AST :
/Exp/
	/Bin/ Exp Exp
		Add
		Sub
		Mul
		Div
	Num double
*/
