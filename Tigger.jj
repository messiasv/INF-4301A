// Options for JavaCC.
options { LOOKAHEAD=1;}

// Main function
PARSER_BEGIN(Tigger)
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Stack;
import java.util.ArrayList;
import ast.*;

public class Tigger
{
    public static Stack<HashMap<String, Exp>> stack; //Used for scope modelisation
    public static void main(String args[]) throws ParseException
    {

        stack = new Stack<HashMap<String, Exp>>(); //Each HashMap is a scope

        Tigger parser = null;
				if(args.length>0) { //Reading source from a file
          try {
            InputStream is = new FileInputStream(args[0]);
            parser = new Tigger(is);
            parser.mainloop();
          }
            catch(IOException e){
							e.printStackTrace();
					}
				} else { //Reading source frome System.in
      			  System.out.println("Please insert an expression:");
	            parser = new Tigger(System.in);
              parser.mainloop();
        }
    }
}
PARSER_END(Tigger)

// Characters to ignore.
SKIP: { " " | "\r" | "\t" }

// Token specifications.
TOKEN:
{
    < NUMBER: (<DIGIT>)+ ("." (<DIGIT>)*)? >
|   < DIGIT: ["0"-"9"] >
|   < EOL: "\n" >
|   < PRINT: "print">
|   < IF: "if">
|   < THEN: "then">
|   < ELSE: "else">
|   < LET: "let">
|   < IN: "in">
|   < END: "end">
|   < VAR: "var">
|   < QUIT: "quit">
|   < WORD: <LETTER> ((<DIGIT>)* ((<LETTER>)*)?)?>
|   < LETTER: ["a"-"z","A"-"Z"]>
|   < SEPARATOR: ",">
}

//Start of the parser
void mainloop():
{ Exp a; }
{
    (
      a = letInEnd() <EOL> {
        if(a!=null){
          System.out.println("Pretty Print:\n" + PrettyPrinter.visit(a) + "\n");
          //Preparation for the next expression
          System.out.println("******************************************************");
          stack.clear();
        }
      }
    )*
    <EOF>
    | <QUIT><EOL> {System.out.println("Credits : MESSIAS Valentin & SAUVION Lorkan"); System.exit(0);}
}

//Each expression must start by a "let", have an "in" inside and finish by an "end"
Exp letInEnd():
{Token t; Exp a=null; Exp b; ArrayList<Exp> exp =new ArrayList<Exp>();}
{
  <LET> {
          HashMap<String, Exp> scope = new HashMap<String, Exp>();
          stack.push(scope); //Creating a new scope
        }
  (
    "var" t=<WORD> ":=" b=ifThenElse() {
      Exp exist = scope.put(t.toString(), b);
      if(exist != null){
        System.out.println("Error: Variable "+ t.toString() + " already declared in this scope");
        System.exit(0);
      }
    }
  )*
  <IN> (a=ifThenElse() {exp.add(a);}(<SEPARATOR>)?)* <END> {
    a = new LetInEnd(scope, exp);
    stack.pop();
    return a;
  }
}

//Next higher priority is IfThenElse
Exp ifThenElse():
{Exp a,b,c;}
{
  (
    (
      //An IfThenElse cannot have multiple expressions in it
      <IF> a = ifThenElse() <THEN> b = ifThenElse()
      (<SEPARATOR> {System.out.println("IfThenElse does not support mutiples expressions"); System.exit(0);})?
      <ELSE> c=ifThenElse() (<SEPARATOR> {System.out.println("IfThenElse does not support mutiples expressions"); System.exit(0);})?
      {
        a = new IfThenElse(a, b, c);
      }
    ) |
    (
    a = comp()
    )
  ) {return a;}
}

//Next higher priority is binary comparison
Exp comp():
{Exp a,b;}
{
  a = expression()
  (
    "="  b = expression() {a = new Eq(a,b);}
  | "<>" b = expression() {a = new Ne(a,b);}
  | "<=" b = expression() {a = new Le(a,b);}
  | "<"  b = expression() {a = new Lt(a,b);}
  | ">=" b = expression() {a = new Ge(a,b);}
  | ">"  b = expression() {a = new Gt(a,b);}
  | {return a;}
  ) {return a;}
}

//Next higher priority is binary operation, starting with add and sub
Exp expression():
{Exp a,b;}
{
	a = term()
	(
		"+" b=term() {a= new Add(a,b);}
	|	"-" b=term() {a= new Sub(a,b);}
	)*	{return a;}
}

//Next higher priority are mul and div
Exp term():
{Exp a,b;}
{
	a = change()
	(
		"*" b=change() {a= new Mul(a,b);}
	|	"/" b=change() {a= new Div(a,b);}
	)*	{return a;}
}

//Grant multiple scope and multiple imbricated operations
Exp change():
{Token t; Exp a;}
{
  a = unary() {return a;}
  | "(" a=comp() ")" {return a;}
  | a = print() {return a;}
  | a = letInEnd() {return a;}
  | t = <WORD> (
  ":=" a = affectation(t){return a;}
  | a = var(t){return a;}
  )
}

//Getting values for a Variable t (if already declared)
Exp var(Token t):
{Exp a, b;}
{
  {Stack<HashMap<String, Exp>> s = (Stack<HashMap<String, Exp>>) stack.clone();
    HashMap<String, Exp> l;
    while(!s.empty()) {
      l = (HashMap<String, Exp>) s.pop();
      if(l.containsKey(t.toString())) {
        Var v = new Var(t.toString(), l.get(t.toString()));
        return v;
      }
    }
    System.out.println("Variable " + t.toString() + " does not exist !!");
    System.exit(0);
  }
}

//Call the Evaluateur visitor
Exp print():
{Token t; Exp a;}
{
  t=<PRINT> "(" a=ifThenElse() ")" {
    System.out.println(""+Evaluateur.visit(new Print(a))+"\n");
    return new Print(a);}
}

//Signed number
Exp unary():
{Token t; Exp a;}
{
    t=<NUMBER> { return new Num(Double.parseDouble(t.toString())); }
|	(
    "+" a = factor() {a = new Plus(a);}
  | "-" a = factor() {a = new Minus(a);}
  ){return a;}
}

// Unsigned number
Exp factor():
{ Token t; Exp a; }
{
    t=<NUMBER> { return new Num(Double.parseDouble(t.toString())); }
}

//If a Variable already exists, give it a new value
Exp affectation(Token t):
{Exp a;}
{
    a=ifThenElse() {
    Stack<HashMap<String, Exp>> s = new Stack<HashMap<String, Exp>>();
    HashMap<String, Exp> l;
    boolean exist = false;
    Aff aff =null;
    while(!stack.empty() || exist == false) {
      l = (HashMap<String, Exp>) stack.pop();
      s.push(l);
      if(l.containsKey(t.toString())) {
        aff = new Aff(t.toString(), a);
        l.put(t.toString(), a);
        exist = true;
      }
    }
    while(!s.empty()){
      stack.push(s.pop());
    }
    if(exist){
      return aff;
    }else{
      System.out.println("Variable "+t.toString()+" was not previously declared");
      System.exit(0);
    }
  }
}
